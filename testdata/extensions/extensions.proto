syntax = "proto3";

package protoc_gen_graphql.test.extensions;

option go_package = "github.com/paulocaldojo/protoc-gen-graphql/testdata/extensions";

import "graphql/options.proto";

option (graphql.file).namespace = "MyPackage";

service Foo {
  option (graphql.service).reference_name = "foo";

  rpc QueryMethod(Request) returns (Response) {
    option (graphql.method) = {
      field: "getFoo"
      operation: "query"
      directive: "foo"
      directive: "bar(arg: \"baz\")"
    };
  }

  rpc BatchMethod(BatchRequest) returns (BatchResponse) {
    option (graphql.method) = {
      field: "getFoos"
      operation: "query"
      load_many: "protoc_gen_graphql.test.extensions.User:ids:users:name"
    };
  }

  rpc MutationMethod(Request) returns (Response) {
    option (graphql.method) = {
      field: "setFoo"
      operation: "mutation"
    };
  }

  rpc SubscriptionMethod(Request) returns (Response) {
    option (graphql.method) = { operation: "subscription" };
  }

  // Adding an invalid operation will cause protoc to error.
  // rpc UnknownMethod(Request) returns (Response) {
  //   option (graphql.method).operation = "unknown";
  // }

  rpc SkippedMethod(Request) returns (Response) {
    option (graphql.method) = {
      operation: "query"
      skip: true
    };
  }

  rpc UntaggedMethod(Request) returns (Response) {}
}

service SkippedService {
  option (graphql.service).skip = true;

  rpc QueryMethod(Request) returns (Response);
}

message Request {
  option (graphql.message).type = "MyRequest";

  string id = 1 [(graphql.field).field = "userId"];
}

message Response {
  option (graphql.message).type = "MyResponse";

  string user_id = 1 [(graphql.field).foreign_key = "protoc_gen_graphql.test.extensions.User:user"];
  repeated string user_ids = 2 [(graphql.field).foreign_key = "protoc_gen_graphql.test.extensions.User:users"];

  // The following should error as 'Address' is not resolvable to a type.
  // string address_id = 999 [(graphql.field).foreign_key = "Address"];
}

message BatchRequest {
  repeated string ids = 1 [(graphql.field).field = "userIds"];
}

message BatchResponse {
  repeated User users = 1;
}

message User {
  option (graphql.message).type = "MyUser";

  string name = 1 [(graphql.field).field = "title"];
  string ages = 2 [(graphql.field).type = "[Int!]!"];
  string password = 3 [(graphql.field).skip = true];
  string directives = 4 [
    (graphql.field).directive = "foo",
    (graphql.field).directive = "bar(arg: \"baz\")",
    (graphql.field).input_directive = "validate(min: 5)"
  ];
  Role role = 5;
}

enum Role {
  option (graphql.pb_enum).type = "MyRole";

  UNKNOWN = 0;
  USER = 1 [(graphql.enum_value).value = "CUSTOMER"];
  ADMIN = 2 [(graphql.enum_value).skip = true];
  DIRECTIVES = 3 [(graphql.enum_value).directive = "foo", (graphql.enum_value).directive = "bar(arg: \"baz\")"];
}
